{"version":3,"file":"static/js/779.92ba168f.chunk.js","mappings":"iSAEaA,EAAcC,EAAAA,GAAAA,GAAH,wFAER,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAClB,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAGvBC,EAAcJ,EAAAA,GAAAA,GAAH,8FACX,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,KAGf,SAAAL,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAI3BI,EAAaP,EAAAA,GAAAA,EAAH,mFACd,SAAAC,GAAC,OAAIA,EAAEC,MAAMM,OAAOC,aACb,SAAAR,GAAC,OAAIA,EAAEC,MAAMQ,YAAYC,QACvB,SAAAV,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAIxBS,EAAUZ,EAAAA,GAAAA,EAAH,0D,SCuCpB,EAvDgB,WACZ,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,WAAOC,GAAP,gFACdH,GAAa,GADC,mBAGSI,EAAAA,EAAAA,IAAgBD,GAHzB,OAGJE,EAHI,OAIJC,EAAaD,EAAKE,QAAQC,KAAI,kBAA8B,CAAEC,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsCP,GAAjD,EAAoBA,OACxDL,EAAWQ,GALD,gDAOVK,QAAQC,IAAR,MAPU,yBASVZ,GAAa,GATH,4EAAH,sDAafE,EAAUR,KAEX,CAACA,IAEAG,EAAQgB,OAAS,GAEb,SAACjC,EAAD,UACKiB,EAAQW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASP,EAAS,EAATA,GAC7B,OACI,UAAClB,EAAD,YACI,UAACG,EAAD,sBAAqBqB,MACrB,uBAAIC,MAFUP,QAU7BJ,GACE,SAACe,EAAA,EAAD,KAEA,SAACrB,EAAD,yD,0MC7CfsB,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CAAEC,QAFV,oCAIT,IAAMC,EAAmB,mCAAG,6GAEJF,IAAAA,IAAA,uBAFI,cAErBG,EAFqB,yBAGpBA,EAASb,MAHW,gCAM3BM,QAAQC,IAAI,KAAMO,SANS,yDAAH,qDAUnBC,EAAmB,mCAAG,WAAOC,GAAP,gGAEJN,IAAAA,IAAA,8BAAiCM,IAF7B,cAErBH,EAFqB,yBAGpBA,EAASb,MAHW,gCAM3BM,QAAQC,IAAI,KAAMO,SANS,yDAAH,sDAUnBG,EAAc,mCAAG,WAAO5B,GAAP,gGAECqB,IAAAA,IAAA,iBAAoBrB,IAFrB,cAEhBwB,EAFgB,yBAGfA,EAASb,MAHM,gCAKtBM,QAAQC,IAAI,KAAMO,SALI,yDAAH,sDASdI,EAAa,mCAAG,WAAO7B,GAAP,gGAEEqB,IAAAA,IAAA,iBAAoBrB,EAApB,aAFF,cAEfwB,EAFe,yBAGdA,EAASb,MAHK,gCAKrBM,QAAQC,IAAI,KAAMO,SALG,yDAAH,sDASbf,EAAe,mCAAG,WAAOV,GAAP,gGAEAqB,IAAAA,IAAA,iBAAoBrB,EAApB,aAFA,cAEjBwB,EAFiB,yBAGhBA,EAASb,MAHO,gCAKvBM,QAAQC,IAAI,KAAMO,SALK,yDAAH","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\nlist-style: none;\npadding-left: ${p => p.theme.space[5]}px;\npadding-right: ${p => p.theme.space[5]}px;\n`;\n\nexport const ReviewsItem = styled.li`\nfont-size: ${p => p.theme.fontSizes.m};\n\n&:not(:last-child){\n    margin-bottom: ${p => p.theme.space[4]}px;\n}\n`;\n\nexport const AuthorName = styled.p`\ncolor: ${p => p.theme.colors.secondary};\nfont-weight:  ${p => p.theme.fontWeights.bold};\n margin-bottom: ${p => p.theme.space[2]}px;\n\n`;\n\nexport const Message = styled.p`\ntext-align: center;\ncolor: red;\n`;","import { Loader } from \"components/Loader/Loader\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchReviewById } from \"services/movieAPI\";\nimport PropTypes from 'prop-types'; \nimport { ReviewsList, ReviewsItem, AuthorName, Message } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const getReview = async (id) => {\n            setIsLoading(true);\n            try {\n                const data = await fetchReviewById(id);\n                const allReviews = data.results.map(({ author, content, id }) => ({ author, content, id }));\n                setReviews(allReviews);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n    \n        getReview(movieId);\n        \n    }, [movieId])\n\n    if (reviews.length > 0) {\n        return (\n            <ReviewsList>\n                {reviews.map(({ author, content, id }) => {\n                    return (\n                        <ReviewsItem key={id}>\n                            <AuthorName>Author: {author}</AuthorName>\n                            <p>{content}</p>\n                        </ReviewsItem>\n                    )\n                }\n                )}\n            </ReviewsList>\n        )\n    }\n    else if (isLoading) {\n        return <Loader/>\n    } else {\n        return <Message>We don't have any reviews for this movie</Message>;\n    }\n}\n\nReviews.propTypes = {\n    movieId: PropTypes.string,\n    isLoading: PropTypes.bool,\n    reviews: PropTypes.shape({\n        author: PropTypes.string,\n        content: PropTypes.string,\n        id: PropTypes.number,\n    })\n}\n\nexport default Reviews;\n","import  axios from 'axios';\n\nconst API_KEY = 'dad2725b968ab7e952dfbc80999b3d08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY}\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/movie/day`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieByKeyWord = async (query) => {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchCastById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/credits`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchReviewById = async (movieId) => {\n     try {\n        const response = await axios.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }  \n}\n\n\n"],"names":["ReviewsList","styled","p","theme","space","ReviewsItem","fontSizes","m","AuthorName","colors","secondary","fontWeights","bold","Message","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","getReview","id","fetchReviewById","data","allReviews","results","map","author","content","console","log","length","Loader","axios","api_key","fetchTrendingMovies","response","message","fetchMovieByKeyWord","query","fetchMovieById","fetchCastById"],"sourceRoot":""}