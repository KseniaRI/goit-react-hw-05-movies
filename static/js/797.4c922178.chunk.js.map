{"version":3,"file":"static/js/797.4c922178.chunk.js","mappings":"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","sources":["components/Box.js","components/Loader/Loader.jsx","components/MovieList/MovieList.jsx","pages/MoviesPage.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);","import { Box } from 'components/Box';\nimport { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () =><Box position=\"absolute\" as=\"div\"><ThreeDots color=\"#3f51b5\" height={100} width={100} ariaLabel='loading' /></Box>","import { Link, useLocation } from \"react-router-dom\"\nimport PropTypes from 'prop-types';\n\nexport const MovieList = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <ul>\n            {movies.map(({id, title}) => <li key={id}><Link to={`/movies/${id}`} state={{from: location}}>{title}</Link></li>)}\n        </ul>\n    )\n}\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number,\n        title: PropTypes.string,\n    }))\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { Formik, Field, Form } from 'formik';\nimport { MovieList } from '../components/MovieList/MovieList';\nimport * as Yup from 'yup';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieByKeyWord } from 'services/movieAPI';\nimport { Loader } from '../components/Loader/Loader';\n\nconst MoviesPage = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const query = searchParams.get(\"query\") ?? \"\";\n     \n    useEffect(() => {\n        const getMoviesByKeyWord = async (keyWord) => {\n            setIsLoading(true);\n            try {\n                const data = await fetchMovieByKeyWord(keyWord);\n                setMovies(data.results);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        if (query === \"\") return;\n\n        getMoviesByKeyWord(query);\n        \n    }, [query])\n\n    return (\n            <>\n                 <Formik initialValues={{ query: '' }}\n                 validationSchema={Yup.object({ query: Yup.string() })}\n                 onSubmit={({ query }, { resetForm }) => {\n                     setSearchParams({ query });\n                     resetForm();\n                 }}\n                 >\n                     <Form>\n                         <Field name='query' type='text' />\n                         <button type='submit'>Search</button>\n                     </Form>\n                </Formik>\n                 {isLoading && <Loader />}\n                 {Object.keys(movies).length > 0 && <MovieList movies={movies} />}                 \n             </>\n    )\n}\n\nexport default MoviesPage;","import  axios from 'axios';\n\nconst API_KEY = 'dad2725b968ab7e952dfbc80999b3d08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY}\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/movie/day`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieByKeyWord = async (query) => {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchCastById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/credits`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchReviewById = async (movieId) => {\n     try {\n        const response = await axios.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }  \n}\n\n\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","Loader","as","height","width","ariaLabel","MovieList","movies","location","useLocation","map","id","title","to","state","from","useSearchParams","searchParams","setSearchParams","useState","setMovies","isLoading","setIsLoading","query","get","useEffect","getMoviesByKeyWord","keyWord","fetchMovieByKeyWord","data","results","console","log","initialValues","validationSchema","Yup","onSubmit","resetForm","name","type","Object","keys","length","axios","api_key","fetchTrendingMovies","response","message","fetchMovieById","movieId","fetchCastById","fetchReviewById"],"sourceRoot":""}