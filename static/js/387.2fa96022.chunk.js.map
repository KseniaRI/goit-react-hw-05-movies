{"version":3,"file":"static/js/387.2fa96022.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\nlist-style: none;\ndisplay: flex;\njustify-content: center;\nflex-wrap: wrap;\nrow-gap: ${p => p.theme.space[2]}px;\ncolumn-gap: ${p => p.theme.space[2]}px;\n`;\n\nexport const CastItem = styled.li`\ndisplay: flex;\nflex-direction: column;\nflex-basis: calc((100% - 4px) / 11);\nborder: ${p => p.theme.borders.normal};\nborder-color: ${p => p.theme.colors.accent};\nborder-radius: ${p => p.theme.radii.normal};\npadding: ${p => p.theme.space[2]}px;\n`;\n\nexport const Img = styled.img`\ndisplay: block;\nwidth: 100%;\nheight: 214px;\nmargin-bottom: ${p => p.theme.space[3]}px;\n`;\n\nexport const Text = styled.p`\nfont-size: ${p => p.theme.fontSizes.s};\nfont-weight: ${p => p.theme.fontWeights.bold};\n`;\n\nexport const TextCharacter = styled.p`\nfont-size: ${p => p.theme.fontSizes.m};\nfont-weight: ${p => p.theme.fontWeights.bold};\ncolor: ${p => p.theme.colors.accent};\n`;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCastById } from \"services/movieAPI\";\nimport { Loader } from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\nimport { CastList, CastItem, Img, Text, TextCharacter } from \"./Cast.styled\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const getCast = async (id) => {\n            setIsLoading(true);\n            try {\n                const data = await fetchCastById(id);\n                const castInfo = data.cast.map(({ name, character, profile_path, id }) => ({ name, character, profile_path, id }));\n                setCast(castInfo);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n    \n        getCast(movieId);\n        \n    }, [movieId])\n\n    if (cast.length > 0) {\n        \n        return (\n            <CastList>\n                {cast.map(({ name, character, profile_path, id }) => {\n                    let path = \"\";\n                    profile_path ? path = `https://www.themoviedb.org/t/p/w138_and_h175_face/${profile_path}`\n                                 : path = 'https://cdn-icons-png.flaticon.com/512/2922/2922506.png';\n                        return (\n                            <CastItem key={id}>\n                                <Img src={path} alt={name} />\n                                <Text>{name}</Text>\n                                <Text>Character:</Text>\n                                <TextCharacter>{character}</TextCharacter>\n                            </CastItem>\n                        )\n                }\n                )}\n            </CastList>\n        )\n    } \n    if (isLoading) {\n        return <Loader />;\n    } \n}\n\nCast.propTypes = {\n    movieId: PropTypes.string,\n    isLoading: PropTypes.bool,\n    cast: PropTypes.shape({\n        name: PropTypes.string,\n        character: PropTypes.string,\n        id: PropTypes.string,\n        profile_path: PropTypes.string,\n    })\n}\n\nexport default Cast;","import { Box } from 'components/Box';\nimport { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => <Box position=\"absolute\"\n                                top='50%'\n                                left='50%'\n                                as=\"div\">\n                                <ThreeDots color=\"#3f51b5\" height={100} width={100} ariaLabel='loading' />\n                            </Box>","import  axios from 'axios';\n\nconst API_KEY = 'dad2725b968ab7e952dfbc80999b3d08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY}\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/movie/day`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieByKeyWord = async (query) => {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchCastById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/credits`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchReviewById = async (movieId) => {\n     try {\n        const response = await axios.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }  \n}\n\n\n"],"names":["CastList","styled","p","theme","space","CastItem","borders","normal","colors","accent","radii","Img","Text","fontSizes","s","fontWeights","bold","TextCharacter","m","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getCast","id","fetchCastById","data","castInfo","map","name","character","profile_path","console","log","length","path","src","alt","Loader","position","top","left","as","color","height","width","ariaLabel","axios","api_key","fetchTrendingMovies","response","message","fetchMovieByKeyWord","query","fetchMovieById","fetchReviewById"],"sourceRoot":""}