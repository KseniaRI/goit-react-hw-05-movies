{"version":3,"file":"static/js/186.284f6a8c.chunk.js","mappings":"6LAEaA,EAAS,kBAAK,0BAAK,SAAC,KAAD,CAAWC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,IAAKC,UAAU,gB,qHC2D9F,UAvDgB,WACZ,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,WAAOC,GAAP,gFACdH,GAAa,GADC,mBAGSI,EAAAA,EAAAA,IAAgBD,GAHzB,OAGJE,EAHI,OAIJC,EAAaD,EAAKE,QAAQC,KAAI,kBAA8B,CAAEC,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsCP,GAAjD,EAAoBA,OACxDL,EAAWQ,GALD,gDAOVK,QAAQC,IAAR,MAPU,yBASVZ,GAAa,GATH,4EAAH,sDAafE,EAAUR,KAEX,CAACA,IAEAG,EAAQgB,OAAS,GAEb,wBACKhB,EAAQW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASP,EAAS,EAATA,GAC7B,OACI,2BACI,oCAAYM,MACZ,uBAAIC,MAFCP,QAUpBJ,GACE,SAAC,IAAD,KAEA,sE,0MC5Cfe,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CAAEC,QAFV,oCAIT,IAAMC,EAAmB,mCAAG,6GAEJF,IAAAA,IAAA,uBAFI,cAErBG,EAFqB,yBAGpBA,EAASZ,MAHW,gCAM3BM,QAAQC,IAAI,KAAMM,SANS,yDAAH,qDAUnBC,EAAmB,mCAAG,WAAOC,GAAP,gGAEJN,IAAAA,IAAA,8BAAiCM,IAF7B,cAErBH,EAFqB,yBAGpBA,EAASZ,MAHW,gCAM3BM,QAAQC,IAAI,KAAMM,SANS,yDAAH,sDAUnBG,EAAc,mCAAG,WAAO3B,GAAP,gGAECoB,IAAAA,IAAA,iBAAoBpB,IAFrB,cAEhBuB,EAFgB,yBAGfA,EAASZ,MAHM,gCAKtBM,QAAQC,IAAI,KAAMM,SALI,yDAAH,sDASdI,EAAa,mCAAG,WAAO5B,GAAP,gGAEEoB,IAAAA,IAAA,iBAAoBpB,EAApB,aAFF,cAEfuB,EAFe,yBAGdA,EAASZ,MAHK,gCAKrBM,QAAQC,IAAI,KAAMM,SALG,yDAAH,sDASbd,EAAe,mCAAG,WAAOV,GAAP,gGAEAoB,IAAAA,IAAA,iBAAoBpB,EAApB,aAFA,cAEjBuB,EAFiB,yBAGhBA,EAASZ,MAHO,gCAKvBM,QAAQC,IAAI,KAAMM,SALK,yDAAH","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.jsx","services/movieAPI.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () =><div><ThreeDots color=\"#3f51b5\" height={100} width={100} ariaLabel='loading' /></div>","import { Loader } from \"components/Loader/Loader\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchReviewById } from \"services/movieAPI\";\nimport PropTypes from 'prop-types'; \n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const getReview = async (id) => {\n            setIsLoading(true);\n            try {\n                const data = await fetchReviewById(id);\n                const allReviews = data.results.map(({ author, content, id }) => ({ author, content, id }));\n                setReviews(allReviews);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n    \n        getReview(movieId);\n        \n    }, [movieId])\n\n    if (reviews.length > 0) {\n        return (\n            <ul>\n                {reviews.map(({ author, content, id }) => {\n                    return (\n                        <li key={id}>\n                            <p>Author: {author}</p>\n                            <p>{content}</p>\n                        </li>\n                    )\n                }\n                )}\n            </ul>\n        )\n    }\n    else if (isLoading) {\n        return <Loader/>\n    } else {\n        return <p>We don't have any reviews for this movie</p>;\n    }\n}\n\nReviews.propTypes = {\n    movieId: PropTypes.string,\n    isLoading: PropTypes.bool,\n    reviews: PropTypes.shape({\n        author: PropTypes.string,\n        content: PropTypes.string,\n        id: PropTypes.number,\n    })\n}\n\nexport default Reviews;\n","import  axios from 'axios';\n\nconst API_KEY = 'dad2725b968ab7e952dfbc80999b3d08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY}\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/movie/day`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieByKeyWord = async (query) => {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchCastById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/credits`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchReviewById = async (movieId) => {\n     try {\n        const response = await axios.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }  \n}\n\n\n"],"names":["Loader","color","height","width","ariaLabel","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","getReview","id","fetchReviewById","data","allReviews","results","map","author","content","console","log","length","axios","api_key","fetchTrendingMovies","response","message","fetchMovieByKeyWord","query","fetchMovieById","fetchCastById"],"sourceRoot":""}