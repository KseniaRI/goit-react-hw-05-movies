{"version":3,"file":"static/js/247.c5eee0fa.chunk.js","mappings":"8LAYaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,K,sHC6CF,UA3Da,WACT,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,mCAAG,WAAOC,GAAP,gFACZH,GAAa,GADD,mBAGWI,EAAAA,EAAAA,IAAcD,GAHzB,OAGFE,EAHE,OAIFC,EAAWD,EAAKR,KAAKU,KAAI,kBAA4C,CAAEC,KAA9C,EAAGA,KAAiDC,UAApD,EAASA,UAAsDC,aAA/D,EAAoBA,aAAyDP,GAA7E,EAAkCA,OACjEL,EAAQQ,GALA,gDAORK,QAAQC,IAAR,MAPQ,yBASRZ,GAAa,GATL,4EAAH,sDAabE,EAAQR,KAET,CAACA,IAEAG,EAAKgB,OAAS,GAGV,wBACKhB,EAAKU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,aAAcP,EAAS,EAATA,GACpCW,EAAO,GAGP,OAFWA,EAAfJ,EAAmB,4DAAwDA,GACrD,2DAEd,2BACI,gBAAKK,MAAM,MAAMC,IAAKF,EAAMG,IAAKT,KACjC,uBAAIA,KACJ,uCAAeC,OAHVN,QAW7BJ,GACO,SAAC,IAAD,SADX,I,qFC9CSmB,EAAS,kBAAK,SAAC,IAAD,CAAKzB,SAAS,WAAW0B,GAAG,MAA5B,UAAkC,SAAC,KAAD,CAAWjC,MAAM,UAAUkC,OAAQ,IAAKL,MAAO,IAAKM,UAAU,gB,0MCA3HC,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CAAEC,QAFV,oCAIT,IAAMC,EAAmB,mCAAG,6GAEJF,IAAAA,IAAA,uBAFI,cAErBG,EAFqB,yBAGpBA,EAASpB,MAHW,gCAM3BM,QAAQC,IAAI,KAAMc,SANS,yDAAH,qDAUnBC,EAAmB,mCAAG,WAAOC,GAAP,gGAEJN,IAAAA,IAAA,8BAAiCM,IAF7B,cAErBH,EAFqB,yBAGpBA,EAASpB,MAHW,gCAM3BM,QAAQC,IAAI,KAAMc,SANS,yDAAH,sDAUnBG,EAAc,mCAAG,WAAOnC,GAAP,gGAEC4B,IAAAA,IAAA,iBAAoB5B,IAFrB,cAEhB+B,EAFgB,yBAGfA,EAASpB,MAHM,gCAKtBM,QAAQC,IAAI,KAAMc,SALI,yDAAH,sDASdtB,EAAa,mCAAG,WAAOV,GAAP,gGAEE4B,IAAAA,IAAA,iBAAoB5B,EAApB,aAFF,cAEf+B,EAFe,yBAGdA,EAASpB,MAHK,gCAKrBM,QAAQC,IAAI,KAAMc,SALG,yDAAH,sDASbI,EAAe,mCAAG,WAAOpC,GAAP,gGAEA4B,IAAAA,IAAA,iBAAoB5B,EAApB,aAFA,cAEjB+B,EAFiB,yBAGhBA,EAASpB,MAHO,gCAKvBM,QAAQC,IAAI,KAAMc,SALK,yDAAH","sources":["components/Box.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCastById } from \"services/movieAPI\";\nimport { Loader } from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const getCast = async (id) => {\n            setIsLoading(true);\n            try {\n                const data = await fetchCastById(id);\n                const castInfo = data.cast.map(({ name, character, profile_path, id }) => ({ name, character, profile_path, id }));\n                setCast(castInfo);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n    \n        getCast(movieId);\n        \n    }, [movieId])\n\n    if (cast.length > 0) {\n        \n        return (\n            <ul>\n                {cast.map(({ name, character, profile_path, id }) => {\n                    let path = \"\";\n                    profile_path ? path = `https://www.themoviedb.org/t/p/w138_and_h175_face/${profile_path}`\n                                 : path = 'https://cdn-icons-png.flaticon.com/512/2922/2922506.png';\n                        return (\n                            <li key={id}>\n                                <img width=\"138\" src={path} alt={name} />\n                                <p>{name}</p>\n                                <p>Character: {character}</p>\n                            </li>\n                        )\n                }\n                )}\n            </ul>\n        )\n    } \n    if (isLoading) {\n        return <Loader />;\n    } \n}\n\nCast.propTypes = {\n    movieId: PropTypes.string,\n    isLoading: PropTypes.bool,\n    cast: PropTypes.shape({\n        name: PropTypes.string,\n        character: PropTypes.string,\n        id: PropTypes.string,\n        profile_path: PropTypes.string,\n    })\n}\n\nexport default Cast;","import { Box } from 'components/Box';\nimport { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () =><Box position=\"absolute\" as=\"div\"><ThreeDots color=\"#3f51b5\" height={100} width={100} ariaLabel='loading' /></Box>","import  axios from 'axios';\n\nconst API_KEY = 'dad2725b968ab7e952dfbc80999b3d08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY}\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const response = await axios.get(`/trending/movie/day`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieByKeyWord = async (query) => {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data;\n    \n} catch (error) {\n        console.log(error.message);\n}\n}\n\nexport const fetchMovieById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchCastById = async (movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/credits`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const fetchReviewById = async (movieId) => {\n     try {\n        const response = await axios.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }  \n}\n\n\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getCast","id","fetchCastById","data","castInfo","map","name","character","profile_path","console","log","length","path","width","src","alt","Loader","as","height","ariaLabel","axios","api_key","fetchTrendingMovies","response","message","fetchMovieByKeyWord","query","fetchMovieById","fetchReviewById"],"sourceRoot":""}